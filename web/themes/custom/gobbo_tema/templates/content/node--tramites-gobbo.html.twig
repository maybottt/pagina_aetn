{#
/**
* @file
* Bootstrap Barrio's theme implementation to display a node.
*
* Available variables:
* - node: The node entity with limited access to object properties and methods.
Only "getter" methods (method names starting with "get", "has", or "is")
and a few common methods such as "id" and "label" are available. Calling
other methods (such as node.delete) will result in an exception.
* - label: The title of the node.
* - content: All node items. Use {{ content }} to print them all,
* or print a subset such as {{ content.field_example }}. Use
* {{ content|without('field_example') }} to temporarily suppress the printing
* of a given child element.
* - author_picture: The node author user entity, rendered using the "compact"
* view mode.
* - metadata: Metadata for this node.
* - date: Themed creation date field.
* - author_name: Themed author name field.
* - url: Direct URL of the current node.
* - display_submitted: Whether submission information should be displayed.
* - attributes: HTML attributes for the containing element.
* The attributes.class element may contain one or more of the following
* classes:
* - node: The current template type (also known as a "theming hook").
* - node--type-[type]: The current node type. For example, if the node is an
* "Article" it would result in "node--type-article". Note that the machine
* name will often be in a short form of the human readable label.
* - node--view-mode-[view_mode]: The View Mode of the node; for example, a
* teaser would result in: "node--view-mode-teaser", and
* full: "node--view-mode-full".
* The following are controlled through the node publishing options.
* - node--promoted: Appears on nodes promoted to the front page.
* - node--sticky: Appears on nodes ordered above other non-sticky nodes in
* teaser listings.
* - node--unpublished: Appears on unpublished nodes visible only to site
* admins.
* - title_attributes: Same as attributes, except applied to the main title
* tag that appears in the template.
* - content_attributes: Same as attributes, except applied to the main
* content tag that appears in the template.
* - author_attributes: Same as attributes, except applied to the author of
* the node tag that appears in the template.
* - title_prefix: Additional output populated by modules, intended to be
* displayed in front of the main title tag that appears in the template.
* - title_suffix: Additional output populated by modules, intended to be
* displayed after the main title tag that appears in the template.
* - view_mode: View mode; for example, "teaser" or "full".
* - teaser: Flag for the teaser state. Will be true if view_mode is 'teaser'.
* - page: Flag for the full page state. Will be true if view_mode is 'full'.
* - readmore: Flag for more state. Will be true if the teaser content of the
* node cannot hold the main body content.
* - logged_in: Flag for authenticated user status. Will be true when the
* current user is a logged-in member.
* - is_admin: Flag for admin user status. Will be true when the current user
* is an administrator.
*
* @see template_preprocess_node()
*/
#}
{{ attach_library('bootstrap_barrio/node') }}

<article{{ attributes.addClass(classes) }}>

  <div class="row pt-4 pb-0 mb-0">
    <div class='col-sm-8 '>
      <nav aria-label="breadcrumb">
        <ol class="breadcrumb">
          <li class="breadcrumb-item">
            <a href="{{url('<front>')}}">Inicio</a>
          </li>
          <li class="breadcrumb-item active" aria-current="page">
            {{node.title.value}}
            {# {{content['field_titulo_nota']['#items'].value}} #}
          </li>

        </ol>
      </nav>
    </div>
  </div>

  <section style="z-index: 3;" id="actualizacion-tramite">
    <div style="z-index: 4;" class="container py-4 texto-descripcion-sitio">
      <div class="row">
        <div class="col-12 col-md-12">
          <iframe id='myIframe' style="border-radius: 20px; border:none; z-index: 5; overflow: auto; width: 100%; "
            src="{{url_tramite}}">
          </iframe>
        </div>
      </div>
    </div>
  </section>

  </article>


  <script>
    var url = JSON.parse("{{url_tramite|json_encode|e('js')}}");
    //console.log('OSO url.......', url);
    const themeToggle = document.getElementById('theme-switcher-button');
    var iframe = document.getElementById('myIframe');
    var userTheme = localStorage.getItem('theme');
    cambiar_tema_iframe(userTheme);
    themeToggle.addEventListener('click', function () {
      userTheme = localStorage.getItem('theme');
      cambiar_tema_iframe(userTheme == 'dark' ? 'light' : 'dark');

    })

    function cambiar_tema_iframe(theme) {
      // console.log('OSO Theme:', theme)
      iframe.setAttribute('src', url + '?theme=' + theme);
    }
  </script>
  <script>
    var base_url = url.toString().split('.bo')[0] + '.bo';
    window.addEventListener('message', (event) => {
      // // Aseg√∫rate de validar el origen del mensaje
      console.log('OSO BASE URL', base_url)
      if (event.origin !== base_url) {
        return;
      }
      console.log('OSO EVENTOS Mensaje', event.data);

      // Procesa el mensaje recibido
      if (event.data.type === 'setHeight' ) {
        // const iframe = document.getElementById('myIframe');
        // console.log('IFRAME', iframe);
        iframe.style.height = event.data.valor + 'px';
      }
    });

  </script>